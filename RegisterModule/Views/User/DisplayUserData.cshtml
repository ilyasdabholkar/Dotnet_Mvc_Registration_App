@model IEnumerable<RegisterModule.Models.User>
@using RegisterModule.Enums;

@{
    ViewData["Title"] = "DisplayUserData";
}

<link rel="stylesheet" href="https://cdn.datatables.net/responsive/2.2.3/css/responsive.bootstrap.css" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-+0n0xVW2eSR5OomGNYDnhzAbDsOXxcvSN1TPprVMTNDbiYZCxYbOOl7+AMvyTG2x" crossorigin="anonymous">

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-gtEjrD/SeCtmISkJkNUaaKMoLD0//ElJ19smozuHV6z3Iehds+3Ulb9Bn9Plx0x4" crossorigin="anonymous"></script>

<table id="UserTable" class="table table-striped table-bordered dataTable displayd mt-3" style="width:100%;">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Email)
            </th>
            <th>
                Alternate Email
            </th>
            <th>
                Name
            </th>
            <th data-orderable="false">
                Looking For
            </th>
            <th>
                Status
            </th>
            <th data-orderable="false">
                @Html.DisplayNameFor(model => model.PhoneNo)
            </th>
            <th data-orderable="false">
                Mobile Number
            </th>
            <th data-orderable="false">
                @Html.DisplayNameFor(model => model.DateOfBirth)
            </th>
            <th data-orderable="false">
                @Html.DisplayNameFor(model => model.Gender)
            </th>
            <th data-orderable="false">
                Maritial Status
            </th>
            <th>
                @Html.DisplayNameFor(model => model.District)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Locality)
            </th>
            <th data-orderable="false">
                @Html.DisplayNameFor(model => model.ZipCode)
            </th>
            <th>
                Highest Qualification
            </th>
            <th data-orderable="false">
                @Html.DisplayNameFor(model => model.Specialization)
            </th>
            <th data-orderable="false">
                @Html.DisplayNameFor(model => model.Institute)
            </th>
            <th data-orderable="false">
                Other Institute
            </th>
            <th data-orderable="false">
                @Html.DisplayNameFor(model => model.PrefferedLocation)
            </th>
            <th data-orderable="false">
                Ready To Relocate
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TotalExperience)
            </th>
            <th data-orderable="false">
                @Html.DisplayNameFor(model => model.JobCategory)
            </th>
            <th data-orderable="false">
                @Html.DisplayNameFor(model => model.KeySkills)
            </th>
            <th data-orderable="false">
                @Html.DisplayNameFor(model => model.CurrentIndustry)
            </th>
            <th data-orderable="false">
                @Html.DisplayNameFor(model => model.CurrentEmployer)
            </th>
            <th data-orderable="false">
                @Html.DisplayNameFor(model => model.CurrentDesignation)
            </th>
            <th data-orderable="false">
                @Html.DisplayNameFor(model => model.PreviousEmployer)
            </th>
            <th data-orderable="false">
                @Html.DisplayNameFor(model => model.PreviousDesignation)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.NoticePeriod)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Ctc)
            </th>
            <th data-orderable="false">
                @Html.DisplayNameFor(model => model.ResumeTitle)
            </th>
            <th data-orderable="false">
                Uploaded Resume
            </th>
            <th data-orderable="false">
                View Resume
            </th>
            <th data-orderable="false">
                Registered On
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Country)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.State)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.City)
            </th>
            <th>
                Action
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td class="no-decoration">
                    @Html.DisplayFor(modelItem => item.Email,new { @class = "no-decoration" })
                </td>
                <td class="no-decoration
">
                    @Html.DisplayFor(modelItem => item.AlternateEmail,new { @class="no-decoration" })
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.FirstName) @Html.DisplayFor(modelItem => item.LastName)
                </td>
                <td>
                    @{
                        var userJobTypes = item.UserJobTypes;
                        var jobtypes = "";

                        foreach (var element in userJobTypes)
                        {
                            jobtypes += element.JobType.Type.ToString();
                        }
                    }
                    @jobtypes
                </td>

                @{
                    var statusClass = item.EmploymentStatus == "Active" ? "active" : "inactive";
                }

                <td>
                    <span class="@statusClass">@Html.DisplayFor(modelItem => item.EmploymentStatus)</span>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PhoneNo)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.MobileNo)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DateOfBirth)
                </td>
                <td>
                    @{
                        var gender = Enum.GetName(typeof(GenderEnum), Convert.ToInt32(item.Gender));
                    }
                    @gender
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.MaritialStatus)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.District)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Locality)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ZipCode)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.HighestQualification)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Specialization)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Institute)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.OtherInstitute)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PrefferedLocation)
                </td>
                <td>
                    @if (item.ReadyToRelocate == true)
                    {
                        <span>Yes</span>
                    }
                    else
                    {
                        <span>No</span>
                    }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TotalExperience)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.JobCategory)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.KeySkills)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CurrentIndustry)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CurrentEmployer)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CurrentDesignation)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PreviousEmployer)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PreviousDesignation)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.NoticePeriod)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Ctc)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ResumeTitle)
                </td>
                <td>
                    @if (item.ResumePath != "")
                    {
                        <a asp-action="DownloadResume" class="btn btn-sm btn-info text-light" asp-route-fileName="@item.ResumePath">View</a>
                    }
                </td>
                @{
                    var selector = item.FirstName + item.UserId;
                }
                <td>
                    @if (item.Resume != null)
                    {
                        <button type="button" class="btn btn-sm btn-info text-light" data-bs-toggle="modal" data-bs-target="#@selector">
                            View
                        </button>
                    }
                </td>

                <!-- Modal -->
                <div class="modal fade" id="@selector" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="staticBackdropLabel">Resume</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                @Html.Raw(item.Resume)
                            </div>
                            <input type="hidden" id="PrintPdf" value="@item.Resume">
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>

                <td>
                    @Convert.ToDateTime(item.CreatedOn).ToString("dd/MM/yyyy")

                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Country.CountryName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.State.StateName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.City.CityName)
                </td>
                <td>
                    <button class="btn btn-sm btn-warning print_btn" >Print</button>
                </td>
                @*  <td>
            <a asp-action="Edit" class="btn btn-warning" asp-route-id="@item.UserId">Edit</a>
            <a asp-action="Details" class="btn btn-primary" asp-route-id="@item.UserId">Details</a>
            <a asp-action="Delete" class="btn btn-danger" asp-route-id="@item.UserId">Delete</a>
            </td>*@
            </tr>
        }
    </tbody>
</table>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="https://cdn.datatables.net/1.12.1/js/jquery.dataTables.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.5/pdfmake.min.js"></script>

<script>

   
   

    @*
        $scope.generatePdf = function () {
        // create the window before the callback
        var win = window.open('', '_blank');
        $http.post('/someUrl', data).then(function (response) {
        // pass the "win" argument
        pdfMake.createPdf(docDefinition).open({}, win);
        });
        };*@
</script>




